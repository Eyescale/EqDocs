#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Nonthreaded Rendering

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br>
  State: Implementated in 0.3 beta
</p>

<h2>Overview</h2>
<p>
  In order to provide an easier porting path for existing software, this feature
  adds the capability to update certain windows from the main application
  thread, i.e., they are nonthreaded. This allows applications with an existing
  main GUI loop and OpenGL drawables to have them updated by Equalizer, while
  using additional resources for scalable rendering or as auxilary
  views. Updating windows from the main thread avoids thread-safety issues with
  the windowing system and widget library.
</p>
<p>
  Using nonthreaded channels as a source for scalable rendering is not a
  supported use case, i.e., a nonthreaded channel should not produce any output
  frames. A nonthreaded channel can contribute to the rendering of its own view,
  as this does not create any dependency for other channels.
</p><p>
  Nonthreaded execution on render client processes happens in the main thread,
  similarly to the execution on the application process.
</p>

<h2>Implementation</h2>
<p>
  The server will send the rendering commands for nonthreaded pipes exactly as
  it does send them to threaded pipes. The receiver thread will queue them on
  the pipe's command queue, exactly the same way as for threaded pipe commands.
  The queued commands will be checked and executed from the config frame
  functions.
</p>
<p>
  <code>Config::endFrame</code> will execute all rendering task for the frame
  about to be finished, that is, for frame <code>current-latency</code>.
</p>

<h3>Reasoning</h3>
<p>
  The main decision is where and when (latency-wise) the rendering commands are
  executed. The (not yet implemented) cull queue/frame data API will send the
  data between startFrame and endFrame. Therefore, the draw tasks have to be
  executed from endFrame, since they would deadlock on data when executed from
  startFrame. Assembly tasks block on the availability of frames. It makes
  therefore sense to execute them late, i.e., endFrame executes the rendering
  tasks for the frame about to finish, to avoid blocking of the application
  thread.
</p>

<h3>Implications</h3>
<p>
  Using a swapbarrier or output frame on nonthreaded channels will block the
  associated threaded channels until the latency has been reached. This
  partially disables the performance benefits of latency. Note that executing
  the render tasks early would disable latency by prohibiting the start of a new
  frame.
</p>

<h2>API</h2>
<!-- /* --><pre>
</pre><!-- */ -->

<h2>File Format</h2>
<!-- /* --><pre>
  global
  {
      EQ_PIPE_IATTR_HINT_THREAD   off | on
  }

  pipe
  {
      ...
      attributes
      {
          hint_thread   off | on
      }
      ...
  }
</pre><!-- */ -->

<h2>Open Issues</h2>
<p>
  Revisit introduction of window threads.
</p>

#include "footer.shtml"
<!-- $Id$ -->
