#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developers: File Format

#include "header.shtml"

<h2>Configuration File Format</h2>
<p>
Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
</p>

<p>
 The configuration file format for the Equalizer server is described below. The
 directory <code>src/examples/configs</code> does contain some example
 configuration files. The file format is not described in detail here,
 please refer to the individual feature specifications for additions and
 changes to the file format. The actual implementation may differ slightly from
 this specification, but we try to keep it up to date. The loader implementation
 is the reference for the file format, look
 at <code>src/server/loader.y</code>, if reading yacc-code is an option.
</p>
<p>
</p>

 <p><pre>
global
{
     EQTOKEN_CONNECTION_TYPE            TCPIP // others (IB, MYRI, ...) later
     EQTOKEN_CONNECTION_HOSTNAME        string
     EQTOKEN_CONNECTION_TCPIP_PORT      unsigned
     EQTOKEN_CONNECTION_LAUNCH_TIMEOUT  unsigned
     EQTOKEN_CONNECTION_LAUNCH_COMMAND  string
}
server
{
    config // 1-n times, currently only the first one is used by the server
    {
        latency int    // # of frames nodes may fall behind application
        (node|appNode) // 1-n times, a system in the cluster
                       // appNode launches render thread within app process
        {
            connection // 0-n times, possible connections to this node
            {
                type     TCPIP    // other protocols when implemented
                hostname string
                command  string   // launch command for the render client
                timeout  unsigned // timeout in milliseconds for launch
            }
            pipe // 1-n times
            {
                display  unsigned     // display/graphics card number
                viewport [ viewport ] // default: autodetect
                window
                {
                    name     string
                    viewport [ viewport ] // wrt pipe, default full screen
                    channel // 1-n times
                    {
                        name     string
                        viewport [ viewport ] //wrt window, default full window
                    }
                }
            }
        }
        compound // 1-n times
        {
            name     string
            channel  string   // where the compound's tasks are executed
            task     [ CLEAR DRAW READBACK ] // ASSEMBLE CULL later
            format   [ COLOR DEPTH ]         // default COLOR
            viewport [ viewport ]            // wrt parent compound, sort-first
            range    [ float float ]         // DB-range for sort-last
            wall                             // frustum description
            {
                bottom_left  [ float float float ]
                bottom_right [ float float float ]
                top_left     [ float float float ]
            }
            
            child-compounds

            swapBarrier  // compounds with the same barriername sync swap
            {
                name string
            }
            outputFrame
            {
                name string
            }
            inputFrame
            {
                name string // corresponding output frame
            }
        }
    }
}
 </pre></p>

#include "footer.shtml"
