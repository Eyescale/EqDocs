#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Node Connection Setup

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
  State: Implemented in 0.1, up-to-date for 0.3
</p>

<div class="float_right">
  <a href="documents/design/images/nodeConnect.png">
    <img src="documents/design/images/nodeConnect-small.jpg" 
         alt="Node connection setup"/></a>
  <div class="label">Node connection setup</div>
</div>
<p>
  The initial node connection handshake, as described below, is fully
  implemented by the
  <a href="/cgi-bin/viewvc.cgi/trunk/src/lib/net/node.cpp?view=markup">eqNet::Node</a>
  class.
</p>
<p>
  Currently there are two situations when two nodes connect to each other. The
  first is a new connection between two running nodes. This happens when the
  application connects to the server, and when two render clients connect to
  each other. The second connection setup happens when a render client is
  launched by the server. For both cases, the image shows how the connection is
  set up.
</p>
<p>
  The node connect packets and the launch command contain the full node
  information (node id and type, all connection descriptions) of the sending
  node. The receiving node stores this information, and can pass it on to other
  nodes for connection setup. The node type is used by createNode to determine
  the node subclass to instanciate.
</p>
<p>
  One special case, not shown in the image, is when two nodes simultaneously
  connect to each other. In that case, two connections between the nodes might
  exist temporarily. The connect packet handlers detect this and close one of
  the connections, before the remote node proxy object is created.
</p>

#include "footer.shtml"
<!-- $Id$ -->
