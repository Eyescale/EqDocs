#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Threads

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
  State: Implemented in 0.3 beta
</p>

<h2>Application (app) Main Thread</h2>
<p>
  The app thread is the main execution thread of an Equalizer application,
  typically the one running main(). It drives the application's rendering and
  executes <a href="documents/design/taskMethods.html#node">node tasks</a>
  and <a href="documents/design/nonthreaded.html">nonthreaded rendering</a>
  tasks.
</p>

<h2>Render Client Main Thread</h2>
<p>
  The render client main thread is very similar to the application thread, in
  that it executes <a href="documents/design/taskMethods.html#node">node
  tasks</a> and <a href="documents/design/nonthreaded.html">nonthreaded
  rendering</a> tasks. The only difference is that it does not drive the
  application's, and that the main loop is controlled by the Equalizer client
  library.
</p>


<h2>Receiver (recv) Thread</h2>
<p>
  Each Equalizer network node has a recv thread, created during
  Node::initLocal(). It listens on all connections and reads the data into
  packets. The packets are <a href="documents/design/packets.html">dispatched to
  the command handler functions</a>. The command handler functions in the
  receiver thread should never block to avoid deadlocks.
</p>

<h2>Pipe Thread(s)</h2>
<p>
  All commands for a pipe and its siblings (windows, channels) are executed in a
  separate thread for optimal performance. The commands are dispatched from the
  receiver thread to the node thread using a fifo. Therefore, the pipe thread
  may block its execution. An exception are nonthreaded pipes, which are
  executed from the main thread.
</p>

#include "footer.shtml"
<!-- $Id$ -->
