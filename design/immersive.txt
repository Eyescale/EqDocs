
                  Stereo and Headtracking in Equalizer


 Input:
  - in eqs::Config::_beginFrame()
    _updateHead()
     o sync head matrix
     o float _eyePosition[3] = head matrix * (+-eyeOffset, 0, 0)
  - add eqs::Config::getEyePosition()
  - Eye offset

 Output
  - Frustum and head transform
    o see Compound::_computeFrustum()
      + get config eye position
      + transform eye position into screen space
      + compute frustum corners from frustum size and eye position
      + compute transformation of frustum ( -trans(eye) * origin->frustum xfm )


 Tracking API

   class Config
   {
       void setHeadPosition( const float pos[3] );
       void setHeadOrientation( const float hpr[3] );
   };

   main
   {
        Tracker tracker;
        if( !tracker.init( "/dev/ttyS0" )
        ...
        while( true )
        {
            const float* hpr = tracker.getOrientation();
            ...
        }
   }

   class Tracker
   {
   public:
       bool init( const std::string& port );
       
       bool update();
       const float* getPosition() const;
       const float* getOrientation() const;

   private:
       int   _fd;
       float _pos[3];
       float _hpr[3];
   };
